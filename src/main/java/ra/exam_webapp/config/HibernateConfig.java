package ra.exam_webapp.config;


import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;
import java.util.Properties;

@Configuration
@EnableTransactionManagement
public class HibernateConfig {
    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource source = new DriverManagerDataSource();
        source.setDriverClassName("com.mysql.cj.jdbc.Driver");
        source.setUrl("jdbc:mysql://localhost:3306/WebApp_db?createDatabaseIfNotExist=true");
        source.setUsername("root");
        source.setPassword("Nhat68linh68#");
        return source;
    }

    public Properties additionalProperties() {
        Properties properties = new Properties();
        properties.setProperty("hibernate.hbm2ddl.auto", "update"); // t·ª± ƒëong t·∫°o CSDL c≈©ng nh∆∞ c√°c bang (DDL)
        properties.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQL8Dialect"); // cung c·∫•p phi√™n b·∫£n v√† H·ªá QTCSDL t∆∞∆°ng th√≠ch
        properties.setProperty("hibernate.show_sql", "true"); // hi·ªÉn th·ªã c√¢u SQL m√† hibernate th·ª±c thi
        properties.setProperty("hibernate.format_sql", "true"); // format c√¢u SQL m√† hibernate th·ª±c thi
        return properties;
    }

    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
        LocalContainerEntityManagerFactoryBean entityManagerFactory =
                new LocalContainerEntityManagerFactoryBean();
        entityManagerFactory.setDataSource(dataSource());
        entityManagerFactory.setPackagesToScan("ra/exam_webapp/entity"); // phat hi·ªán c√°c ClassMapping vs Table
        JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        entityManagerFactory.setJpaVendorAdapter(vendorAdapter);
        entityManagerFactory.setJpaProperties(additionalProperties());
        return entityManagerFactory;
    }

    @Bean
    @Qualifier(value = "entityManager")
    public EntityManager entityManager(EntityManagerFactory entityManagerFactory) {
        return entityManagerFactory.createEntityManager();
    }

    @Bean
    public PlatformTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(entityManagerFactory);
        return transactionManager;
    }


}



//D∆∞·ªõi ƒë√¢y l√† phi√™n b·∫£n m√£ ngu·ªìn c·ªßa b·∫°n v·ªõi c√°c ghi ch√∫ chi ti·∫øt, gi√∫p gi·∫£i th√≠ch t·ª´ng ph·∫ßn c·ªßa c·∫•u h√¨nh Hibernate:
//
//        ```java
//package ra.demoproject.config;
//
//import org.springframework.beans.factory.annotation.Qualifier;
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//import org.springframework.jdbc.datasource.DriverManagerDataSource;
//import org.springframework.orm.jpa.JpaTransactionManager;
//import org.springframework.orm.jpa.JpaVendorAdapter;
//import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
//import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
//import org.springframework.transaction.PlatformTransactionManager;
//import org.springframework.transaction.annotation.EnableTransactionManagement;
//
//import javax.persistence.EntityManager;
//import javax.persistence.EntityManagerFactory;
//import javax.sql.DataSource;
//import java.util.Properties;
//
///**
// * HibernateConfig c·∫•u h√¨nh Hibernate trong ·ª©ng d·ª•ng Spring Boot,
// * bao g·ªìm c·∫•u h√¨nh k·∫øt n·ªëi CSDL, EntityManagerFactory v√† TransactionManager.
// */
//@Configuration
//@EnableTransactionManagement // B·∫≠t qu·∫£n l√Ω giao d·ªãch t·ª± ƒë·ªông trong Spring.
//public class HibernateConfig {
//
//    /**
//     * C·∫•u h√¨nh ngu·ªìn d·ªØ li·ªáu (DataSource).
//     * S·ª≠ d·ª•ng DriverManagerDataSource ƒë·ªÉ cung c·∫•p th√¥ng tin k·∫øt n·ªëi MySQL.
//     *
//     * @return ƒê·ªëi t∆∞·ª£ng DataSource c·∫•u h√¨nh s·∫µn.
//     */
//    @Bean
//    public DataSource dataSource() {
//        DriverManagerDataSource source = new DriverManagerDataSource();
//        source.setDriverClassName("com.mysql.cj.jdbc.Driver"); // ƒê·ªãnh nghƒ©a driver k·∫øt n·ªëi MySQL.
//        source.setUrl("jdbc:mysql://localhost:3306/final_project?createDatabaseIfNotExist=true"); // ƒê·ªãa ch·ªâ CSDL.
//        source.setUsername("root"); // T√™n ƒëƒÉng nh·∫≠p MySQL.
//        source.setPassword("Nhat68linh68#"); // M·∫≠t kh·∫©u MySQL.
//        return source;
//    }
//
//    /**
//     * Thi·∫øt l·∫≠p c√°c thu·ªôc t√≠nh b·ªï sung cho Hibernate.
//     * C√°c thu·ªôc t√≠nh n√†y ƒëi·ªÅu ch·ªânh h√†nh vi c·ªßa Hibernate khi t∆∞∆°ng t√°c v·ªõi CSDL.
//     *
//     * @return ƒê·ªëi t∆∞·ª£ng Properties ch·ª©a c√°c c·∫•u h√¨nh Hibernate.
//     */
//    public Properties additionalProperties() {
//        Properties properties = new Properties();
//        properties.setProperty("hibernate.hbm2ddl.auto", "update"); // Hibernate t·ª± ƒë·ªông c·∫≠p nh·∫≠t ho·∫∑c t·∫°o b·∫£ng n·∫øu ch∆∞a c√≥.
//        properties.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQL8Dialect"); // Hibernate s·ª≠ d·ª•ng dialect ph√π h·ª£p v·ªõi MySQL.
//        properties.setProperty("hibernate.show_sql", "true"); // Hi·ªÉn th·ªã c√¢u l·ªánh SQL do Hibernate th·ª±c thi tr√™n console.
//        properties.setProperty("hibernate.format_sql", "true"); // ƒê·ªãnh d·∫°ng c√¢u SQL ƒë·ªÉ d·ªÖ ƒë·ªçc.
//        return properties;
//    }
//
//    /**
//     * C·∫•u h√¨nh EntityManagerFactory, n∆°i Hibernate qu·∫£n l√Ω c√°c entity v√† t∆∞∆°ng t√°c v·ªõi CSDL.
//     *
//     * @return ƒê·ªëi t∆∞·ª£ng LocalContainerEntityManagerFactoryBean ch·ª©a c·∫•u h√¨nh Hibernate.
//     */
//    @Bean
//    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
//        LocalContainerEntityManagerFactoryBean entityManagerFactory = new LocalContainerEntityManagerFactoryBean();
//        entityManagerFactory.setDataSource(dataSource()); // Thi·∫øt l·∫≠p ngu·ªìn d·ªØ li·ªáu.
//        entityManagerFactory.setPackagesToScan("ra.demoproject.entity"); // Hibernate s·∫Ω qu√©t c√°c entity trong package n√†y.
//        JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
//        entityManagerFactory.setJpaVendorAdapter(vendorAdapter);
//        entityManagerFactory.setJpaProperties(additionalProperties()); // √Åp d·ª•ng c√°c thu·ªôc t√≠nh Hibernate.
//        return entityManagerFactory;
//    }
//
//    /**
//     * T·∫°o Bean EntityManager ƒë·ªÉ thao t√°c v·ªõi CSDL.
//     *
//     * @param entityManagerFactory Factory cung c·∫•p EntityManager.
//     * @return ƒê·ªëi t∆∞·ª£ng EntityManager.
//     */
//    @Bean
//    @Qualifier(value = "entityManager")
//    public EntityManager entityManager(EntityManagerFactory entityManagerFactory) {
//        return entityManagerFactory.createEntityManager();
//    }
//
//    /**
//     * C·∫•u h√¨nh TransactionManager ƒë·ªÉ qu·∫£n l√Ω giao d·ªãch.
//     *
//     * @param entityManagerFactory Factory EntityManager.
//     * @return ƒê·ªëi t∆∞·ª£ng PlatformTransactionManager.
//     */
//    @Bean
//    public PlatformTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {
//        JpaTransactionManager transactionManager = new JpaTransactionManager();
//        transactionManager.setEntityManagerFactory(entityManagerFactory); // Thi·∫øt l·∫≠p EntityManagerFactory cho TransactionManager.
//        return transactionManager;
//    }
//}
//```
//
//        ### Gi·∫£i th√≠ch t·ªïng th·ªÉ:
//        - **`@Configuration`**: ƒê√°nh d·∫•u ƒë√¢y l√† m·ªôt l·ªõp c·∫•u h√¨nh Spring.
//- **`@EnableTransactionManagement`**: K√≠ch ho·∫°t qu·∫£n l√Ω giao d·ªãch trong Spring.
//        - **`dataSource()`**: C·∫•u h√¨nh ngu·ªìn d·ªØ li·ªáu MySQL, v·ªõi th√¥ng tin ƒëƒÉng nh·∫≠p v√† URL CSDL.
//- **`additionalProperties()`**: X√°c ƒë·ªãnh c√°c thu·ªôc t√≠nh Hibernate nh∆∞ ch·∫ø ƒë·ªô t·∫°o b·∫£ng, dialect, hi·ªÉn th·ªã SQL.
//- **`entityManagerFactory()`**: C·∫•u h√¨nh EntityManagerFactory ƒë·ªÉ Hibernate c√≥ th·ªÉ qu·∫£n l√Ω c√°c entity.
//- **`entityManager()`**: T·∫°o EntityManager ƒë·ªÉ thao t√°c v·ªõi CSDL.
//- **`transactionManager()`**: C·∫•u h√¨nh TransactionManager ƒë·ªÉ ƒë·∫£m b·∫£o c√°c giao d·ªãch ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng c√°ch.
//
//Vi·ªác th√™m c√°c ghi ch√∫ n√†y gi√∫p m√£ ngu·ªìn d·ªÖ hi·ªÉu h∆°n, t·∫°o s·ª± thu·∫≠n ti·ªán khi b·∫£o tr√¨ ho·∫∑c m·ªü r·ªông h·ªá th·ªëng. B·∫°n c√≥ mu·ªën b·ªï sung th√™m th√¥ng tin ho·∫∑c ƒëi·ªÅu ch·ªânh g√¨ kh√¥ng? üöÄ
